export default function(component, methods) {

  const formattedMethods = methods.reduce((obj, d) => {

    const {defaultvalue, optional, type} = d.params[0];
    const types = type.names.map(t => t.toLowerCase());
    const controlMaps = {string: "text"}
    const control = types.find(t => t !== "function");

    const argObject = {
      type: {required: !optional, summary: types.join(" | ")},
      control: { type: controlMaps[control] || control },
      description: d.description
    }
    if (defaultvalue !== undefined) {
      argObject.defaultValue = defaultvalue;
      const funcDefault = typeof defaultvalue === "string" && defaultvalue.includes("=>");
      argObject.table = {
        defaultValue: {
          summary: funcDefault ? "function" : defaultvalue,
          detail: funcDefault ? defaultvalue : false
        }
      };
    }
    else {
      argObject.table = {
        defaultValue: {summary: "undefined"}
      };
    }
    obj[d.name] = argObject;

    return obj;

  }, {});

  return `// WARNING: do not edit this file directly, it is re-generated every release.

import React from "react";
import Viz from "./Viz.args";
import { assign } from "d3plus-common";

import { ${component} as D3plus${component} } from "d3plus-react";
export const ${component} = ({ config }) => <D3plus${component} config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in ${component}
   */
  Object.keys(Viz.argTypes)
    .filter(k => !k.match(/^(discrete|shape|zoom.*)$/))
    .reduce((obj, k) => (obj[k] = Viz.argTypes[k], obj), {}),

  /**
   * ${component}-specific methods
   */
  
${JSON.stringify(formattedMethods, null, 2)
  .replace(/"([^"]+)":/g, '$1:')
  .replace(/^/gm, "  ")}
);
`;

}