// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {TextBox as D3plusTextBox} from "@d3plus/react";
export const TextBox = ({ config }) => <D3plusTextBox config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in TextBox
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * TextBox-specific methods
   */
  
  {
    ariaHidden: {
      control: {
        type: "text"
      },
      defaultValue: "false",
      description: "If *value* is specified, sets the aria-hidden attribute to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "false"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    data: {
      control: {
        type: "object"
      },
      defaultValue: "[]",
      description: "Sets the data array to the specified array. A text box will be drawn for each object in the array.",
      table: {
        defaultValue: {
          summary: "[]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    delay: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Sets the animation delay to the specified number in milliseconds.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    duration: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Sets the animation duration to the specified number in milliseconds.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    ellipsis: {
      control: {
        type: "text"
      },
      defaultValue: "(text, line) => line ? `${text.replace(/\\.|,$/g, )}...` : ",
      description: "Sets the function that handles what to do when a line is truncated. It should return the new value for the line, and is passed 2 arguments: the String of text for the line in question, and the number of the line. By default, an ellipsis is added to the end of any line except if it is the first word that cannot fit (in that case, an empty string is returned).",
      table: {
        defaultValue: {
          detail: "(text, line) => line ? `${text.replace(/\\.|,$/g, )}...` : ",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    fontColor: {
      control: {
        type: "text"
      },
      defaultValue: "black",
      description: "Sets the font color to the specified accessor function or static string, which is inferred from the [DOM selection](#textBox.select) by default.",
      table: {
        defaultValue: {
          summary: "black"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    fontFamily: {
      control: {
        type: "object"
      },
      defaultValue: "fontFamily",
      description: "Defines the font-family to be used. The value passed can be either a *String* name of a font, a comma-separated list of font-family fallbacks, an *Array* of fallbacks, or a *Function* that returns either a *String* or an *Array*. If supplying multiple fallback fonts, the [fontExists](#fontExists) function will be used to determine the first available font on the client's machine.",
      table: {
        defaultValue: {
          summary: "fontFamily"
        }
      },
      type: {
        required: false,
        summary: "array | function | string"
      }
    },
    fontMax: {
      control: {
        type: "number"
      },
      defaultValue: 50,
      description: "Sets the maximum font size to the specified accessor function or static number (which corresponds to pixel units), which is used when [dynamically resizing fonts](#textBox.fontResize).",
      table: {
        defaultValue: {
          summary: 50
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    fontMin: {
      control: {
        type: "number"
      },
      defaultValue: 8,
      description: "Sets the minimum font size to the specified accessor function or static number (which corresponds to pixel units), which is used when [dynamically resizing fonts](#textBox.fontResize).",
      table: {
        defaultValue: {
          summary: 8
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    fontOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      description: "Sets the font opacity to the specified accessor function or static number between 0 and 1.",
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    fontResize: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      description: "Toggles font resizing, which can either be defined as a static boolean for all data points, or an accessor function that returns a boolean. See [this example](http://d3plus.org/examples/d3plus-text/resizing-text/) for a side-by-side comparison.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "function | boolean"
      }
    },
    fontSize: {
      control: {
        type: "number"
      },
      defaultValue: 10,
      description: "Sets the font size to the specified accessor function or static number (which corresponds to pixel units), which is inferred from the [DOM selection](#textBox.select) by default.",
      table: {
        defaultValue: {
          summary: 10
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    fontStroke: {
      control: {
        type: "text"
      },
      defaultValue: "transparent",
      description: "Sets the font stroke color for the rendered text.",
      table: {
        defaultValue: {
          summary: "transparent"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    fontStrokeWidth: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Sets the font stroke width for the rendered text.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    fontWeight: {
      control: {
        type: "number"
      },
      defaultValue: 400,
      description: "Sets the font weight to the specified accessor function or static number, which is inferred from the [DOM selection](#textBox.select) by default.",
      table: {
        defaultValue: {
          summary: 400
        }
      },
      type: {
        required: false,
        summary: "function | number | string"
      }
    },
    height: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"height\"] || 200",
      description: "Sets the height for each box to the specified accessor function or static number.",
      table: {
        defaultValue: {
          detail: "d => d[\"height\"] || 200",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    html: {
      control: {
        type: "object"
      },
      defaultValue: "defaultHtmlLookup",
      description: "Configures the ability to render simple HTML tags. Defaults to supporting `<b>`, `<strong>`, `<i>`, and `<em>`, set to false to disable or provide a mapping of tags to svg styles",
      table: {
        defaultValue: {
          summary: "defaultHtmlLookup"
        }
      },
      type: {
        required: true,
        summary: "object | boolean"
      }
    },
    id: {
      control: {
        type: "number"
      },
      defaultValue: "(d, i) => d.id || `${i}`",
      description: "Defines the unique id for each box to the specified accessor function or static number.",
      table: {
        defaultValue: {
          detail: "(d, i) => d.id || `${i}`",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    lineHeight: {
      control: {
        type: "number"
      },
      defaultValue: "(d, i) => this._fontSize(d, i) * 1.2",
      description: "Sets the line height to the specified accessor function or static number, which is 1.2 times the [font size](#textBox.fontSize) by default.",
      table: {
        defaultValue: {
          detail: "(d, i) => this._fontSize(d, i) * 1.2",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    maxLines: {
      control: {
        type: "number"
      },
      defaultValue: "null",
      description: "Restricts the maximum number of lines to wrap onto, which is null (unlimited) by default.",
      table: {
        defaultValue: {
          summary: "null"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    on: {
      control: {
        type: "text"
      },
      defaultValue: "{}",
      description: "Adds or removes a *listener* to each object for the specified event *typenames*. If a *listener* is not specified, returns the currently assigned listener for the specified event *typename*. Mirrors the core [d3-selection](https://github.com/d3/d3-selection#selection_on) behavior.",
      table: {
        defaultValue: {
          summary: "{}"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    overflow: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      description: "Sets the text overflow to the specified accessor function or static boolean.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "function | boolean"
      }
    },
    padding: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Sets the padding to the specified accessor function, CSS shorthand string, or static number, which is 0 by default.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number | string"
      }
    },
    pointerEvents: {
      control: {
        type: "text"
      },
      defaultValue: "auto",
      description: "Sets the pointer-events to the specified accessor function or static string.",
      table: {
        defaultValue: {
          summary: "auto"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    render: {
      control: {},
      description: "Renders the text boxes. If a *callback* is specified, it will be called once the shapes are done drawing.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    rotate: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Sets the rotate percentage for each box to the specified accessor function or static string.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    rotateAnchor: {
      control: {},
      defaultValue: "(d) => [\n  d.w / 2,\nd.h / 2\n]",
      description: "Sets the anchor point around which to rotate the text box.",
      table: {
        defaultValue: {
          detail: "(d) => [\n  d.w / 2,\nd.h / 2\n]",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function | array.<number>"
      }
    },
    select: {
      control: {
        type: "text"
      },
      description: "Sets the SVG container element to the specified d3 selector or DOM element. If not explicitly specified, an SVG element will be added to the page for use.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "string | htmlelement"
      }
    },
    split: {
      control: {},
      defaultValue: "textSplit",
      description: "Sets the word split behavior to the specified function, which when passed a string is expected to return that string split into an array of words.",
      table: {
        defaultValue: {
          summary: "textSplit"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    text: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"text\"]",
      description: "Sets the text for each box to the specified accessor function or static string.",
      table: {
        defaultValue: {
          detail: "d => d[\"text\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    textAnchor: {
      control: {
        type: "text"
      },
      defaultValue: "start",
      description: "Sets the horizontal text anchor to the specified accessor function or static string, whose values are analagous to the SVG [text-anchor](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor) property.",
      table: {
        defaultValue: {
          summary: "start"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    verticalAlign: {
      control: {
        type: "text"
      },
      defaultValue: "top",
      description: "Sets the vertical alignment to the specified accessor function or static string. Accepts `\"top\"`, `\"middle\"`, and `\"bottom\"`.",
      table: {
        defaultValue: {
          summary: "top"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    width: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"width\"] || 200",
      description: "Sets the width for each box to the specified accessor function or static number.",
      table: {
        defaultValue: {
          detail: "d => d[\"width\"] || 200",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    x: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"x\"]",
      description: "Sets the x position for each box to the specified accessor function or static number. The number given should correspond to the left side of the textBox.",
      table: {
        defaultValue: {
          detail: "d => d[\"x\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    y: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"y\"]",
      description: "Sets the y position for each box to the specified accessor function or static number. The number given should correspond to the top side of the textBox.",
      table: {
        defaultValue: {
          detail: "d => d[\"y\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    }
  }
);
