// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {Legend as D3plusLegend} from "@d3plus/react";
export const Legend = ({ config }) => <D3plusLegend config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in Legend
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * Legend-specific methods
   */
  
  {
    active: {
      control: {},
      description: "If *value* is specified, sets the active method for all shapes to the specified function and returns the current class instance. If *value* is not specified, returns the current active method.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    align: {
      control: {
        type: "text"
      },
      defaultValue: "center",
      description: "If *value* is specified, sets the horizontal alignment to the specified value and returns the current class instance. If *value* is not specified, returns the current horizontal alignment.",
      table: {
        defaultValue: {
          summary: "center"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    data: {
      control: {
        type: "object"
      },
      defaultValue: "[  ]",
      description: "If *data* is specified, sets the data array to the specified array and returns the current class instance. If *data* is not specified, returns the current data array. A shape key will be drawn for each object in the array.",
      table: {
        defaultValue: {
          summary: "[  ]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    direction: {
      control: {
        type: "text"
      },
      defaultValue: "row",
      description: "Sets the flow of the items inside the legend. If no value is passed, the current flow will be returned.",
      table: {
        defaultValue: {
          summary: "row"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    duration: {
      control: {
        type: "number"
      },
      defaultValue: 600,
      description: "If *value* is specified, sets the transition duration of the legend and returns the current class instance. If *value* is not specified, returns the current duration.",
      table: {
        defaultValue: {
          summary: 600
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    height: {
      control: {
        type: "number"
      },
      defaultValue: 200,
      description: "If *value* is specified, sets the overall height of the legend and returns the current class instance. If *value* is not specified, returns the current height value.",
      table: {
        defaultValue: {
          summary: 200
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    hover: {
      control: {},
      description: "If *value* is specified, sets the hover method for all shapes to the specified function and returns the current class instance. If *value* is not specified, returns the current hover method.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    id: {
      control: {},
      defaultValue: "d => d[\"id\"]",
      description: "If *value* is specified, sets the id accessor to the specified function and returns the current class instance. If *value* is not specified, returns the current id accessor.",
      table: {
        defaultValue: {
          detail: "d => d[\"id\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    label: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"id\"]",
      description: "If *value* is specified, sets the label accessor to the specified function or string and returns the current class instance. If *value* is not specified, returns the current label accessor, which is the [id](#shape.id) accessor by default.",
      table: {
        defaultValue: {
          detail: "d => d[\"id\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    padding: {
      control: {
        type: "number"
      },
      defaultValue: 5,
      description: "If *value* is specified, sets the padding between each key to the specified number and returns the current class instance. If *value* is not specified, returns the current padding value.",
      table: {
        defaultValue: {
          summary: 5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    render: {
      control: {},
      description: "Renders the current Legend to the page. If a *callback* is specified, it will be called once the legend is done drawing.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    select: {
      control: {
        type: "text"
      },
      defaultValue: "d3.select(\"body\").append(\"svg\")",
      description: "If *selector* is specified, sets the SVG container element to the specified d3 selector or DOM element and returns the current class instance. If *selector* is not specified, returns the current SVG container element.",
      table: {
        defaultValue: {
          summary: "d3.select(\"body\").append(\"svg\")"
        }
      },
      type: {
        required: false,
        summary: "string | htmlelement"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Rect",
      description: "If *value* is specified, sets the shape accessor to the specified function or string and returns the current class instance. If *value* is not specified, returns the current shape accessor.",
      table: {
        defaultValue: {
          summary: "Rect"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fill: d => d[\"color\"], height: 12, hitArea: (dd, i) => {\n  const d = this._lineData[i], h = max([\n      d.height,\n      d.shapeHeight\n  ]);\n  return {\n      width: d.width + d.shapeWidth,\n      height: h,\n      x: -d.shapeWidth / 2,\n      y: -h / 2\n  };\n}, labelBounds: (dd, i) => {\n  const d = this._lineData[i];\n  let x = d.shapeWidth / 2;\n  if (d.shape === \"Circle\") x -= d.shapeR / 2;\n  const height = max([\n      d.shapeHeight,\n      d.height\n  ]);\n  const rtlMod = this._rtl ? d.shapeWidth + d.width + this._padding * 2 : 0;\n  return {\n      width: d.width,\n      height,\n      x: x + padding - rtlMod,\n      y: -height / 2\n  };\n}, labelConfig: {fontColor: colorDefaults.dark, fontFamily: this._titleClass.fontFamily(), fontResize: false, fontSize: 10, verticalAlign: middle}, opacity: 1, r: 6, width: 12, x: (d, i) => {\n  const datum = this._lineData[i];\n  const y = datum.y;\n  const pad = this._align === \"left\" || this._align === \"right\" && this._direction === \"column\" ? 0 : this._align === \"center\" ? (this._outerBounds.width - this._rowWidth(this._lineData.filter((l)=>y === l.y))) / 2 : this._outerBounds.width - this._rowWidth(this._lineData.filter((l)=>y === l.y));\n  const prevWords = this._lineData.slice(0, i).filter((l)=>y === l.y);\n  const rtlMod = this._rtl ? datum.width + this._padding : 0;\n  return this._rowWidth(prevWords) + this._padding * (prevWords.length ? datum.sentence ? 2 : 1 : 0) + this._outerBounds.x + datum.shapeWidth / 2 + pad + rtlMod;\n}, y: (d, i) => {\n  const ld = this._lineData[i];\n  return ld.y + this._titleHeight + this._outerBounds.y + max(this._lineData.filter((l)=>ld.y === l.y).map((l)=>l.height).concat(this._data.map((l, x)=>this._fetchConfig(\"height\", l, x)))) / 2;\n}}",
      description: "If *config* is specified, sets the methods that correspond to the key/value pairs for each shape and returns the current class instance. If *config* is not specified, returns the current shape configuration.",
      table: {
        defaultValue: {
          detail: "{fill: d => d[\"color\"], height: 12, hitArea: (dd, i) => {\n  const d = this._lineData[i], h = max([\n      d.height,\n      d.shapeHeight\n  ]);\n  return {\n      width: d.width + d.shapeWidth,\n      height: h,\n      x: -d.shapeWidth / 2,\n      y: -h / 2\n  };\n}, labelBounds: (dd, i) => {\n  const d = this._lineData[i];\n  let x = d.shapeWidth / 2;\n  if (d.shape === \"Circle\") x -= d.shapeR / 2;\n  const height = max([\n      d.shapeHeight,\n      d.height\n  ]);\n  const rtlMod = this._rtl ? d.shapeWidth + d.width + this._padding * 2 : 0;\n  return {\n      width: d.width,\n      height,\n      x: x + padding - rtlMod,\n      y: -height / 2\n  };\n}, labelConfig: {fontColor: colorDefaults.dark, fontFamily: this._titleClass.fontFamily(), fontResize: false, fontSize: 10, verticalAlign: middle}, opacity: 1, r: 6, width: 12, x: (d, i) => {\n  const datum = this._lineData[i];\n  const y = datum.y;\n  const pad = this._align === \"left\" || this._align === \"right\" && this._direction === \"column\" ? 0 : this._align === \"center\" ? (this._outerBounds.width - this._rowWidth(this._lineData.filter((l)=>y === l.y))) / 2 : this._outerBounds.width - this._rowWidth(this._lineData.filter((l)=>y === l.y));\n  const prevWords = this._lineData.slice(0, i).filter((l)=>y === l.y);\n  const rtlMod = this._rtl ? datum.width + this._padding : 0;\n  return this._rowWidth(prevWords) + this._padding * (prevWords.length ? datum.sentence ? 2 : 1 : 0) + this._outerBounds.x + datum.shapeWidth / 2 + pad + rtlMod;\n}, y: (d, i) => {\n  const ld = this._lineData[i];\n  return ld.y + this._titleHeight + this._outerBounds.y + max(this._lineData.filter((l)=>ld.y === l.y).map((l)=>l.height).concat(this._data.map((l, x)=>this._fetchConfig(\"height\", l, x)))) / 2;\n}}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    title: {
      control: {
        type: "text"
      },
      description: "If *value* is specified, sets the title of the legend and returns the current class instance. If *value* is not specified, returns the current title.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    titleConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fontSize: 12}",
      description: "If *value* is specified, sets the title configuration of the legend and returns the current class instance. If *value* is not specified, returns the current title configuration.",
      table: {
        defaultValue: {
          summary: "{fontSize: 12}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    verticalAlign: {
      control: {
        type: "text"
      },
      defaultValue: "middle",
      description: "If *value* is specified, sets the vertical alignment to the specified value and returns the current class instance. If *value* is not specified, returns the current vertical alignment.",
      table: {
        defaultValue: {
          summary: "middle"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    width: {
      control: {
        type: "number"
      },
      defaultValue: 400,
      description: "If *value* is specified, sets the overall width of the legend and returns the current class instance. If *value* is not specified, returns the current width value.",
      table: {
        defaultValue: {
          summary: 400
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    }
  }
);
