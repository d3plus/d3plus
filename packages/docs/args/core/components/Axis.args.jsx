// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {Axis as D3plusAxis} from "@d3plus/react";
export const Axis = ({ config }) => <D3plusAxis config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in Axis
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * Axis-specific methods
   */
  
  {
    align: {
      control: {
        type: "text"
      },
      defaultValue: "middle",
      description: "Supports `\"left\"` and `\"center\"` and `\"right\"`.",
      table: {
        defaultValue: {
          summary: "middle"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    barConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: openColor.colors.gray.600, stroke-width: 1}",
      table: {
        defaultValue: {
          summary: "{stroke: openColor.colors.gray.600, stroke-width: 1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    data: {
      control: {
        type: "array"
      },
      defaultValue: "[\n\n]",
      table: {
        defaultValue: {
          summary: "[\n\n]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    domain: {
      control: {
        type: "array"
      },
      defaultValue: "[\n0,\n10\n]",
      table: {
        defaultValue: {
          summary: "[\n0,\n10\n]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    duration: {
      control: {
        type: "number"
      },
      defaultValue: 600,
      table: {
        defaultValue: {
          summary: 600
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    grid: {
      control: {
        type: "array"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    gridConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: colorDefaults.light, stroke-width: 1}",
      table: {
        defaultValue: {
          summary: "{stroke: colorDefaults.light, stroke-width: 1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    gridLog: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    gridSize: {
      control: {
        type: "number"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    height: {
      control: {
        type: "number"
      },
      defaultValue: 400,
      table: {
        defaultValue: {
          summary: 400
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    labelOffset: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    labelRotation: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    labels: {
      control: {
        type: "array"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    maxSize: {
      control: {
        type: "number"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    minSize: {
      control: {
        type: "number"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    orient: {
      control: {
        type: "text"
      },
      defaultValue: "bottom",
      description: "Supports `\"top\"`, `\"right\"`, `\"bottom\"`, and `\"left\"` orientations.",
      table: {
        defaultValue: {
          summary: "bottom"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    padding: {
      control: {
        type: "number"
      },
      defaultValue: 5,
      table: {
        defaultValue: {
          summary: 5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    paddingInner: {
      control: {
        type: "number"
      },
      defaultValue: 0.1,
      table: {
        defaultValue: {
          summary: 0.1
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    paddingOuter: {
      control: {
        type: "number"
      },
      defaultValue: 0.1,
      table: {
        defaultValue: {
          summary: 0.1
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    range: {
      control: {
        type: "array"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    render: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    rounding: {
      control: {
        type: "text"
      },
      defaultValue: "none",
      table: {
        defaultValue: {
          summary: "none"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMaxPrefix: {
      control: {
        type: "text"
      },
      defaultValue: "",
      table: {
        defaultValue: {
          summary: ""
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMaxSuffix: {
      control: {
        type: "text"
      },
      defaultValue: "+",
      table: {
        defaultValue: {
          summary: "+"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMinPrefix: {
      control: {
        type: "text"
      },
      defaultValue: "< ",
      table: {
        defaultValue: {
          summary: "< "
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMinSuffix: {
      control: {
        type: "text"
      },
      defaultValue: "",
      table: {
        defaultValue: {
          summary: ""
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    scale: {
      control: {
        type: "text"
      },
      defaultValue: "linear",
      table: {
        defaultValue: {
          summary: "linear"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    scalePadding: {
      control: {
        type: "number"
      },
      defaultValue: 0.5,
      table: {
        defaultValue: {
          summary: 0.5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    select: {
      control: {
        type: "text"
      },
      defaultValue: "d3.select(\"body\").append(\"svg\")",
      table: {
        defaultValue: {
          summary: "d3.select(\"body\").append(\"svg\")"
        }
      },
      type: {
        required: false,
        summary: "string | htmlelement"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Line",
      table: {
        defaultValue: {
          summary: "Line"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fill: openColor.colors.gray.600, height: (d) => d.tick ? 8 : 0, label: (d) => d.text, labelBounds: (d) => d.labelBounds, labelConfig: {fontColor: openColor.colors.gray.600, fontResize: false, fontSize: 12, padding: 5, textAnchor: () => {\n  const rtl = detectRTL(this._select.node());\n  return this._orient === \"left\" ? rtl ? \"start\" : \"end\" : this._orient === \"right\" ? rtl ? \"end\" : \"start\" : this._labelRotation ? this._orient === \"bottom\" ? \"end\" : \"start\" : \"middle\";\n}, verticalAlign: () => this._orient === bottom ? top : this._orient === top ? bottom : middle}, r: (d) => d.tick ? 4 : 0, stroke: openColor.colors.gray.600, strokeWidth: 1, width: (d) => d.tick ? 8 : 0}",
      table: {
        defaultValue: {
          detail: "{fill: openColor.colors.gray.600, height: (d) => d.tick ? 8 : 0, label: (d) => d.text, labelBounds: (d) => d.labelBounds, labelConfig: {fontColor: openColor.colors.gray.600, fontResize: false, fontSize: 12, padding: 5, textAnchor: () => {\n  const rtl = detectRTL(this._select.node());\n  return this._orient === \"left\" ? rtl ? \"start\" : \"end\" : this._orient === \"right\" ? rtl ? \"end\" : \"start\" : this._labelRotation ? this._orient === \"bottom\" ? \"end\" : \"start\" : \"middle\";\n}, verticalAlign: () => this._orient === bottom ? top : this._orient === top ? bottom : middle}, r: (d) => d.tick ? 4 : 0, stroke: openColor.colors.gray.600, strokeWidth: 1, width: (d) => d.tick ? 8 : 0}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    tickFormat: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    tickSize: {
      control: {
        type: "number"
      },
      defaultValue: 8,
      table: {
        defaultValue: {
          summary: 8
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    tickSuffix: {
      control: {
        type: "text"
      },
      defaultValue: "normal",
      table: {
        defaultValue: {
          summary: "normal"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    ticks: {
      control: {
        type: "array"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    timeLocale: {
      control: {
        type: "object"
      },
      defaultValue: "undefined",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    title: {
      control: {
        type: "text"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    titleConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fontColor: colorDefaults.dark, fontSize: 12, textAnchor: middle}",
      table: {
        defaultValue: {
          summary: "{fontColor: colorDefaults.dark, fontSize: 12, textAnchor: middle}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    width: {
      control: {
        type: "number"
      },
      defaultValue: 400,
      table: {
        defaultValue: {
          summary: 400
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    }
  }
);
