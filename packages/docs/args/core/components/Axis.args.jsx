// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {Axis as D3plusAxis} from "@d3plus/react";
export const Axis = ({ config }) => <D3plusAxis config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in Axis
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * Axis-specific methods
   */
  
  {
    align: {
      control: {
        type: "text"
      },
      defaultValue: "middle",
      description: "If *value* is specified, sets the horizontal alignment to the specified value and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "middle"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    barConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: openColor.colors.gray.600, stroke-width: 1}",
      description: "If *value* is specified, sets the axis line style and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "{stroke: openColor.colors.gray.600, stroke-width: 1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    data: {
      control: {
        type: "object"
      },
      defaultValue: "[  ]",
      description: "An array of data points, which helps determine which ticks should be shown and which time resolution should be displayed.",
      table: {
        defaultValue: {
          summary: "[  ]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    domain: {
      control: {
        type: "object"
      },
      defaultValue: "[\n  0,\n10\n]",
      description: "If *value* is specified, sets the scale domain of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "[\n  0,\n10\n]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    duration: {
      control: {
        type: "number"
      },
      defaultValue: 600,
      description: "If *value* is specified, sets the transition duration of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 600
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    grid: {
      control: {
        type: "object"
      },
      description: "If *value* is specified, sets the grid values of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    gridConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: colorDefaults.light, stroke-width: 1}",
      description: "If *value* is specified, sets the grid config of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "{stroke: colorDefaults.light, stroke-width: 1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    gridLog: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      description: "If *value* is specified, sets the grid behavior of the axis when scale is logarithmic and returns the current class instance.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    gridSize: {
      control: {
        type: "number"
      },
      description: "If *value* is specified, sets the grid size of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    height: {
      control: {
        type: "number"
      },
      defaultValue: 400,
      description: "If *value* is specified, sets the overall height of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 400
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    labelOffset: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      description: "If *value* is specified, sets whether offsets will be used to position some labels further away from the axis in order to allow space for the text.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    labelRotation: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      description: "If *value* is specified, sets whether whether horizontal axis labels are rotated -90 degrees.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    labels: {
      control: {
        type: "object"
      },
      description: "If *value* is specified, sets the visible tick labels of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    maxSize: {
      control: {
        type: "number"
      },
      description: "If *value* is specified, sets the maximum size allowed for the space that contains the axis tick labels and title.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    minSize: {
      control: {
        type: "number"
      },
      description: "If *value* is specified, sets the minimum size alloted for the space that contains the axis tick labels and title.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    orient: {
      control: {
        type: "text"
      },
      defaultValue: "bottom",
      description: "If *orient* is specified, sets the orientation of the shape and returns the current class instance. If *orient* is not specified, returns the current orientation.",
      table: {
        defaultValue: {
          summary: "bottom"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    padding: {
      control: {
        type: "number"
      },
      defaultValue: 5,
      description: "If *value* is specified, sets the padding between each tick label to the specified number and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    paddingInner: {
      control: {
        type: "number"
      },
      defaultValue: 0.1,
      description: "If *value* is specified, sets the inner padding of band scale to the specified number and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 0.1
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    paddingOuter: {
      control: {
        type: "number"
      },
      defaultValue: 0.1,
      description: "If *value* is specified, sets the outer padding of band scales to the specified number and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 0.1
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    range: {
      control: {
        type: "object"
      },
      description: "If *value* is specified, sets the scale range (in pixels) of the axis and returns the current class instance. The given array must have 2 values, but one may be `undefined` to allow the default behavior for that value.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    render: {
      control: {},
      description: "Renders the current Axis to the page. If a *callback* is specified, it will be called once the legend is done drawing.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    rounding: {
      control: {
        type: "text"
      },
      defaultValue: "none",
      description: "Sets the rounding method, so that more evenly spaced ticks appear at the extents of the scale. Can be set to \"none\" (default), \"outside\", or \"inside\".",
      table: {
        defaultValue: {
          summary: "none"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMaxPrefix: {
      control: {
        type: "text"
      },
      defaultValue: "",
      description: "Sets the prefix used for the maximum value of \"inside\" rounding scales.",
      table: {
        defaultValue: {
          summary: ""
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMaxSuffix: {
      control: {
        type: "text"
      },
      defaultValue: "+",
      description: "Sets the suffix used for the maximum value of \"inside\" rounding scales.",
      table: {
        defaultValue: {
          summary: "+"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMinPrefix: {
      control: {
        type: "text"
      },
      defaultValue: "< ",
      description: "Sets the prefix used for the minimum value of \"inside\" rounding scales.",
      table: {
        defaultValue: {
          summary: "< "
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    roundingInsideMinSuffix: {
      control: {
        type: "text"
      },
      defaultValue: "",
      description: "Sets the suffix used for the minimum value of \"inside\" rounding scales.",
      table: {
        defaultValue: {
          summary: ""
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    scale: {
      control: {
        type: "text"
      },
      defaultValue: "linear",
      description: "If *value* is specified, sets the scale of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "linear"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    scalePadding: {
      control: {
        type: "number"
      },
      defaultValue: 0.5,
      description: "Sets the \"padding\" property of the scale, often used in point scales.",
      table: {
        defaultValue: {
          summary: 0.5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    select: {
      control: {
        type: "text"
      },
      defaultValue: "d3.select(\"body\").append(\"svg\")",
      description: "If *selector* is specified, sets the SVG container element to the specified d3 selector or DOM element and returns the current class instance. If *selector* is not specified, returns the current SVG container element.",
      table: {
        defaultValue: {
          summary: "d3.select(\"body\").append(\"svg\")"
        }
      },
      type: {
        required: false,
        summary: "string | htmlelement"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Line",
      description: "If *value* is specified, sets the tick shape constructor and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "Line"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fill: openColor.colors.gray.600, height: (d) => d.tick ? 8 : 0, label: (d) => d.text, labelBounds: (d) => d.labelBounds, labelConfig: {fontColor: openColor.colors.gray.600, fontResize: false, fontSize: 12, padding: 5, textAnchor: () => {\n  const rtl = detectRTL(this._select.node());\n  return this._orient === \"left\" ? rtl ? \"start\" : \"end\" : this._orient === \"right\" ? rtl ? \"end\" : \"start\" : this._labelRotation ? this._orient === \"bottom\" ? \"end\" : \"start\" : \"middle\";\n}, verticalAlign: () => this._orient === bottom ? top : this._orient === top ? bottom : middle}, r: (d) => d.tick ? 4 : 0, stroke: openColor.colors.gray.600, strokeWidth: 1, width: (d) => d.tick ? 8 : 0}",
      description: "If *value* is specified, sets the tick style of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "{fill: openColor.colors.gray.600, height: (d) => d.tick ? 8 : 0, label: (d) => d.text, labelBounds: (d) => d.labelBounds, labelConfig: {fontColor: openColor.colors.gray.600, fontResize: false, fontSize: 12, padding: 5, textAnchor: () => {\n  const rtl = detectRTL(this._select.node());\n  return this._orient === \"left\" ? rtl ? \"start\" : \"end\" : this._orient === \"right\" ? rtl ? \"end\" : \"start\" : this._labelRotation ? this._orient === \"bottom\" ? \"end\" : \"start\" : \"middle\";\n}, verticalAlign: () => this._orient === bottom ? top : this._orient === top ? bottom : middle}, r: (d) => d.tick ? 4 : 0, stroke: openColor.colors.gray.600, strokeWidth: 1, width: (d) => d.tick ? 8 : 0}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    tickFormat: {
      control: {},
      description: "If *value* is specified, sets the tick formatter and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    tickSize: {
      control: {
        type: "number"
      },
      defaultValue: 8,
      description: "If *value* is specified, sets the tick size of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 8
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    tickSuffix: {
      control: {
        type: "text"
      },
      defaultValue: "normal",
      description: "Sets the behavior of the abbreviations when you are using linear scale. This method accepts two options: \"normal\" (uses formatAbbreviate to determinate the abbreviation) and \"smallest\" (uses suffix from the smallest tick as reference in every tick).",
      table: {
        defaultValue: {
          summary: "normal"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    ticks: {
      control: {
        type: "object"
      },
      description: "If *value* is specified, sets the tick values of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    timeLocale: {
      control: {
        type: "object"
      },
      defaultValue: "undefined",
      description: "Defines a custom locale object to be used in time scale. This object must include the following properties: dateTime, date, time, periods, days, shortDays, months, shortMonths. For more information, you can revise [d3p.d3-time-format](https://github.com/d3/d3-time-format/blob/master/README.md#timeFormatLocale).",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    title: {
      control: {
        type: "text"
      },
      description: "If *value* is specified, sets the title of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    titleConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fontColor: colorDefaults.dark, fontSize: 12, textAnchor: middle}",
      description: "If *value* is specified, sets the title configuration of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "{fontColor: colorDefaults.dark, fontSize: 12, textAnchor: middle}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    width: {
      control: {
        type: "number"
      },
      defaultValue: 400,
      description: "If *value* is specified, sets the overall width of the axis and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 400
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    }
  }
);
