// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {Tooltip as D3plusTooltip} from "@d3plus/react";
export const Tooltip = ({ config }) => <D3plusTooltip config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in Tooltip
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * Tooltip-specific methods
   */
  
  {
    arrow: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"arrow\"]",
      description: "Sets the inner HTML content of the arrow element, which by default is empty.",
      table: {
        defaultValue: {
          detail: "d => d[\"arrow\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    arrowStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{content: , background: inherit, border: inherit, border-width: 0 1px 1px 0, height: 10px, position: absolute, transform: rotate(45deg), width: 10px, z-index: -1}",
      description: "If *value* is specified, sets the arrow styles to the specified values and returns this generator. If *value* is not specified, returns the current arrow styles.",
      table: {
        defaultValue: {
          summary: "{content: , background: inherit, border: inherit, border-width: 0 1px 1px 0, height: 10px, position: absolute, transform: rotate(45deg), width: 10px, z-index: -1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    background: {
      control: {
        type: "text"
      },
      defaultValue: "colorDefaults.light",
      description: "If *value* is specified, sets the background accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current background accessor.",
      table: {
        defaultValue: {
          summary: "colorDefaults.light"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    body: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"body\"]",
      description: "If *value* is specified, sets the body accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current body accessor.",
      table: {
        defaultValue: {
          detail: "d => d[\"body\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    bodyStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{font-size: 12px, font-weight: 400, z-index: 1}",
      description: "If *value* is specified, sets the body styles to the specified values and returns this generator. If *value* is not specified, returns the current body styles.",
      table: {
        defaultValue: {
          summary: "{font-size: 12px, font-weight: 400, z-index: 1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    border: {
      control: {
        type: "text"
      },
      defaultValue: "1px solid rgba(0, 0, 0, 0.25)",
      description: "If *value* is specified, sets the border accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current border accessor.",
      table: {
        defaultValue: {
          summary: "1px solid rgba(0, 0, 0, 0.25)"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    borderRadius: {
      control: {
        type: "text"
      },
      defaultValue: "4px",
      description: "If *value* is specified, sets the border-radius accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current border-radius accessor.",
      table: {
        defaultValue: {
          summary: "4px"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    className: {
      control: {
        type: "text"
      },
      defaultValue: "d3plus-tooltip",
      description: "If *value* is specified, sets the class name to the specified string and returns this generator. If *value* is not specified, returns the current class name.",
      table: {
        defaultValue: {
          summary: "d3plus-tooltip"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    data: {
      control: {
        type: "object"
      },
      defaultValue: "[  ]",
      description: "If *data* is specified, sets the data array to the specified array and returns this generator. If *data* is not specified, returns the current data array.",
      table: {
        defaultValue: {
          summary: "[  ]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    footer: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"footer\"]",
      description: "If *value* is specified, sets the footer accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current footer accessor.",
      table: {
        defaultValue: {
          detail: "d => d[\"footer\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    footerStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{font-size: 9px, font-weight: 400, margin-top: 5px, z-index: 1}",
      description: "If *value* is specified, sets the footer styles to the specified values and returns this generator. If *value* is not specified, returns the current footer styles.",
      table: {
        defaultValue: {
          summary: "{font-size: 9px, font-weight: 400, margin-top: 5px, z-index: 1}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    height: {
      control: {
        type: "text"
      },
      defaultValue: "auto",
      description: "If *value* is specified, sets the height accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current height accessor.",
      table: {
        defaultValue: {
          summary: "auto"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    id: {
      control: {
        type: "text"
      },
      defaultValue: "(d, i) => `${i}`",
      description: "If *value* is specified, sets the id accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current id accessor.",
      table: {
        defaultValue: {
          detail: "(d, i) => `${i}`",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    offset: {
      control: {
        type: "number"
      },
      defaultValue: 5,
      description: "If *value* is specified, sets the offset accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current offset accessor.",
      table: {
        defaultValue: {
          summary: 5
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    padding: {
      control: {
        type: "text"
      },
      defaultValue: "10px",
      description: "If *value* is specified, sets the padding accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current padding accessor.",
      table: {
        defaultValue: {
          summary: "10px"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    pointerEvents: {
      control: {
        type: "text"
      },
      defaultValue: "auto",
      description: "If *value* is specified, sets the pointer-events accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current pointer-events accessor.",
      table: {
        defaultValue: {
          summary: "auto"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    position: {
      control: {
        type: "object"
      },
      defaultValue: "(d) => [\n  d.x,\nd.y\n]",
      description: "If *value* is specified, sets the position accessor to the specified function or array and returns this generator. If *value* is not specified, returns the current position accessor. If *value* is an HTMLElement, anchors the Tooltip to that HTMLElement. If *value* is a selection string, anchors the Tooltip to the HTMLElement selected by that string. Otherwise, coordinate points must be in reference to the client viewport, not the overall page.",
      table: {
        defaultValue: {
          detail: "(d) => [\n  d.x,\nd.y\n]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | array | htmlelement | string"
      }
    },
    tableStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{border-collapse: collapse, border-spacing: 0, width: 100%}",
      description: "If *value* is specified, sets the table styles to the specified values and returns this generator. If *value* is not specified, returns the current table styles.",
      table: {
        defaultValue: {
          summary: "{border-collapse: collapse, border-spacing: 0, width: 100%}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    tbody: {
      control: {
        type: "object"
      },
      defaultValue: "[  ]",
      description: "If *value* is specified, sets the contents of the table body to the specified array of functions or strings and returns this generator. If *value* is not specified, returns the current table body data.",
      table: {
        defaultValue: {
          summary: "[  ]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    tbodyStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{font-size: 12px, text-align: center}",
      description: "If *value* is specified, sets the table body styles to the specified values and returns this generator. If *value* is not specified, returns the current table body styles.",
      table: {
        defaultValue: {
          summary: "{font-size: 12px, text-align: center}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    tdStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{}",
      description: "An object with CSS keys and values to be applied to all <td> elements inside of each <tr>.",
      table: {
        defaultValue: {
          summary: "{}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    thead: {
      control: {
        type: "object"
      },
      defaultValue: "[  ]",
      description: "If *value* is specified, sets the contents of the table head to the specified array of functions or strings and returns this generator. If *value* is not specified, returns the current table head data.",
      table: {
        defaultValue: {
          summary: "[  ]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    theadStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{font-size: 12px, font-weight: 600, text-align: center}",
      description: "If *value* is specified, sets the table head styles to the specified values and returns this generator. If *value* is not specified, returns the current table head styles.",
      table: {
        defaultValue: {
          summary: "{font-size: 12px, font-weight: 600, text-align: center}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    title: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"title\"]",
      description: "If *value* is specified, sets the title accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current title accessor.",
      table: {
        defaultValue: {
          detail: "d => d[\"title\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    titleStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{font-size: 14px, font-weight: 600, margin-bottom: 5px}",
      description: "If *value* is specified, sets the title styles to the specified values and returns this generator. If *value* is not specified, returns the current title styles.",
      table: {
        defaultValue: {
          summary: "{font-size: 14px, font-weight: 600, margin-bottom: 5px}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    tooltipStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{box-shadow: 0 1px 5px rgba(0, 0, 0, 0.25), color: colorDefaults.dark, font-family: fontFamilyStringify(fontFamily)}",
      description: "If *value* is specified, sets the overall tooltip styles to the specified values and returns this generator. If *value* is not specified, returns the current title styles.",
      table: {
        defaultValue: {
          summary: "{box-shadow: 0 1px 5px rgba(0, 0, 0, 0.25), color: colorDefaults.dark, font-family: fontFamilyStringify(fontFamily)}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    trStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{border-top: (d, i) => i ? 1px solid rgba(0, 0, 0, 0.1) : none}",
      description: "An object with CSS keys and values to be applied to all <tr> elements inside of each <tbody>.",
      table: {
        defaultValue: {
          detail: "{border-top: (d, i) => i ? 1px solid rgba(0, 0, 0, 0.1) : none}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    width: {
      control: {
        type: "text"
      },
      defaultValue: "150px",
      description: "If *value* is specified, sets the width accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current width accessor.",
      table: {
        defaultValue: {
          summary: "150px"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    }
  }
);
