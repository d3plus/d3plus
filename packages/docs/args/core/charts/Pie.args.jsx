// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Pie as D3plusPie} from "@d3plus/react";
export const Pie = ({ config }) => <D3plusPie config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Pie
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Pie-specific methods
   */
  
  {
    innerRadius: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    legend: {
      control: {
        type: "boolean"
      },
      defaultValue: "(config, arr) => {\n  if (arr.length === this._filteredData.length) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
      table: {
        defaultValue: {
          detail: "(config, arr) => {\n  if (arr.length === this._filteredData.length) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "boolean | function"
      }
    },
    legendSort: {
      control: {},
      defaultValue: "(a, b) => this._value(b) - this._value(a)",
      table: {
        defaultValue: {
          detail: "(a, b) => this._value(b) - this._value(a)",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function"
      }
    },
    padAngle: {
      control: {
        type: "number"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    padPixel: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._shapeConfig, {ariaLabel: (d, i) => this._pieData ? `${++this._pieData.i.index}. ${this._drawLabel(d, i)}, ${this._value(d, i)}.` : , Path: {labelConfig: {fontResize: true}}})",
      table: {
        defaultValue: {
          detail: "assign(this._shapeConfig, {ariaLabel: (d, i) => this._pieData ? `${++this._pieData.i.index}. ${this._drawLabel(d, i)}, ${this._value(d, i)}.` : , Path: {labelConfig: {fontResize: true}}})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    sort: {
      control: {},
      defaultValue: "(a, b) => this._value(b) - this._value(a)",
      table: {
        defaultValue: {
          detail: "(a, b) => this._value(b) - this._value(a)",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    value: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"value\"]",
      description: "= d => d.value",
      table: {
        defaultValue: {
          detail: "d => d[\"value\"]",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    }
  }
);
