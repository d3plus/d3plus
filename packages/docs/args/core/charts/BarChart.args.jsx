// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as plotArgTypes} from "./Plot.args.jsx";
import {assign} from "@d3plus/dom";

import {BarChart as D3plusBarChart} from "@d3plus/react";
export const BarChart = ({ config }) => <D3plusBarChart config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Plot primitive and
   * overrides any defaults that have been changed in BarChart
   */
  Object.keys(plotArgTypes)
    .filter(k => !k.match(/^(shape|zoom.*)$/))
    .reduce((obj, k) => (obj[k] = plotArgTypes[k], obj), {}),

  /**
   * BarChart-specific methods
   */
  
  {
    baseline: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Sets the baseline for the x/y plot. If *value* is not specified, returns the current baseline.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    discrete: {
      control: {
        type: "text"
      },
      defaultValue: "x",
      description: "If *value* is specified, sets the discrete accessor to the specified method name (usually an axis) and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "x"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    legend: {
      control: {
        type: "boolean"
      },
      defaultValue: "(config, arr) => {\n  const legendIds = arr.map(this._groupBy[this._legendDepth].bind(this)).sort().join();\n  const barIds = this._filteredData.map(this._groupBy[this._legendDepth].bind(this)).sort().join();\n  if (legendIds === barIds) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
      description: "If *value* is specified, toggles the legend based on the specified boolean and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "(config, arr) => {\n  const legendIds = arr.map(this._groupBy[this._legendDepth].bind(this)).sort().join();\n  const barIds = this._filteredData.map(this._groupBy[this._legendDepth].bind(this)).sort().join();\n  if (legendIds === barIds) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "boolean | function"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Bar",
      description: "Changes the primary shape used to represent each data point in a visualization. Not all visualizations support changing shapes, this method can be provided the String name of a D3plus shape class (for example, \"Rect\" or \"Circle\"), or an accessor Function that returns the String class name to be used for each individual data point.",
      table: {
        defaultValue: {
          summary: "Bar"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    }
  }
);
