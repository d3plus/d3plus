// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Sankey as D3plusSankey} from "@d3plus/react";
export const Sankey = ({ config }) => <D3plusSankey config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Sankey
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Sankey-specific methods
   */
  
  {
    hover: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    links: {
      control: {
        type: "array"
      },
      defaultValue: "d => d[\"links\"]",
      description: "= []",
      table: {
        defaultValue: {
          detail: "d => d[\"links\"]",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "array"
      }
    },
    linksSource: {
      control: {
        type: "text"
      },
      defaultValue: "source",
      table: {
        defaultValue: {
          summary: "source"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    linksTarget: {
      control: {
        type: "text"
      },
      defaultValue: "target",
      table: {
        defaultValue: {
          summary: "target"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    noDataMessage: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    nodeAlign: {
      control: {
        type: "text"
      },
      defaultValue: "sankeyAligns.justify",
      table: {
        defaultValue: {
          summary: "sankeyAligns.justify"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    nodeId: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"id\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"id\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    nodePadding: {
      control: {
        type: "number"
      },
      defaultValue: 8,
      table: {
        defaultValue: {
          summary: 8
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    nodeWidth: {
      control: {
        type: "number"
      },
      defaultValue: 30,
      table: {
        defaultValue: {
          summary: 30
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    nodes: {
      control: {
        type: "array"
      },
      defaultValue: "d => d[\"nodes\"]",
      description: "= []",
      table: {
        defaultValue: {
          detail: "d => d[\"nodes\"]",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "array"
      }
    },
    on: {
      control: {
        type: "text"
      },
      defaultValue: {
        mouseenter: "() => {\n  }",
        "mouseleave.shape": "() => {\n  this.hover(false);\n}",
        "mousemove.shape": "(d, i, x, event) => {\n  defaultMouseMove(d, i, x, event);\n  if (this._focus && this._focus === d.id) {\n      this.hover(false);\n      this._on.mouseenter.bind(this)(d, i, x, event);\n      this._focus = undefined;\n  } else {\n      const id = this._nodeId(d, i), node = this._nodeLookup[id], nodeLookup = Object.keys(this._nodeLookup).reduce((all, item)=>{\n          all[this._nodeLookup[item]] = !isNaN(item) ? parseInt(item, 10) : item;\n          return all;\n      }, {});\n      const links = this._linkLookup[node];\n      const filterIds = [\n          id\n      ];\n      links.forEach((l)=>{\n          filterIds.push(nodeLookup[l]);\n      });\n      this.hover((h, x)=>{\n          if (h.source && h.target) {\n              return h.source.id === id || h.target.id === id;\n          } else {\n              return filterIds.includes(this._nodeId(h, x));\n          }\n      });\n  }\n}"
      },
      table: {
        defaultValue: {
          summary: {
            mouseenter: "() => {\n  }",
            "mouseleave.shape": "() => {\n  this.hover(false);\n}",
            "mousemove.shape": "(d, i, x, event) => {\n  defaultMouseMove(d, i, x, event);\n  if (this._focus && this._focus === d.id) {\n      this.hover(false);\n      this._on.mouseenter.bind(this)(d, i, x, event);\n      this._focus = undefined;\n  } else {\n      const id = this._nodeId(d, i), node = this._nodeLookup[id], nodeLookup = Object.keys(this._nodeLookup).reduce((all, item)=>{\n          all[this._nodeLookup[item]] = !isNaN(item) ? parseInt(item, 10) : item;\n          return all;\n      }, {});\n      const links = this._linkLookup[node];\n      const filterIds = [\n          id\n      ];\n      links.forEach((l)=>{\n          filterIds.push(nodeLookup[l]);\n      });\n      this.hover((h, x)=>{\n          if (h.source && h.target) {\n              return h.source.id === id || h.target.id === id;\n          } else {\n              return filterIds.includes(this._nodeId(h, x));\n          }\n      });\n  }\n}"
          }
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Rect",
      table: {
        defaultValue: {
          summary: "Rect"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._shapeConfig, {Path: {fill: none, hoverStyle: {stroke-width: (d) => Math.max(1, Math.abs(d.source.y1 - d.source.y0) * (d.value / d.source.value) - 2)}, label: false, stroke: #DBDBDB, strokeOpacity: 0.5, strokeWidth: (d) => Math.max(1, Math.abs(d.source.y1 - d.source.y0) * (d.value / d.source.value) - 2)}, Rect: {}})",
      table: {
        defaultValue: {
          detail: "assign(this._shapeConfig, {Path: {fill: none, hoverStyle: {stroke-width: (d) => Math.max(1, Math.abs(d.source.y1 - d.source.y0) * (d.value / d.source.value) - 2)}, label: false, stroke: #DBDBDB, strokeOpacity: 0.5, strokeWidth: (d) => Math.max(1, Math.abs(d.source.y1 - d.source.y0) * (d.value / d.source.value) - 2)}, Rect: {}})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    value: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: true,
        summary: "function | number"
      }
    }
  }
);
