// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Tree as D3plusTree} from "@d3plus/react";
export const Tree = ({ config }) => <D3plusTree config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Tree
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Tree-specific methods
   */
  
  {
    orient: {
      control: {
        type: "text"
      },
      defaultValue: "vertical",
      description: "Accepts either \"vertical\" or \"horizontal\".",
      table: {
        defaultValue: {
          summary: "vertical"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    separation: {
      control: {},
      defaultValue: "(a, b) => a.parent === b.parent ? 1 : 2",
      table: {
        defaultValue: {
          detail: "(a, b) => a.parent === b.parent ? 1 : 2",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Circle",
      table: {
        defaultValue: {
          summary: "Circle"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._shapeConfig, {ariaLabel: (d, i) => this._treeData ? `${this._treeData.i.depth}. ${this._drawLabel(d, i)}.` : , labelConfig: {fontColor: #444}, Path: {fill: none, stroke: #ccc, strokeWidth: 1}, r: 5, width: 10, height: 10})",
      table: {
        defaultValue: {
          detail: "assign(this._shapeConfig, {ariaLabel: (d, i) => this._treeData ? `${this._treeData.i.depth}. ${this._drawLabel(d, i)}.` : , labelConfig: {fontColor: #444}, Path: {fill: none, stroke: #ccc, strokeWidth: 1}, r: 5, width: 10, height: 10})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    }
  }
);
