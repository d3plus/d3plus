// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Tree as D3plusTree} from "@d3plus/react";
export const Tree = ({ config }) => <D3plusTree config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Tree
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Tree-specific methods
   */
  
  {
    legendTooltip: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._legendTooltip, {title: legendLabel.bind(this)})",
      description: "If *value* is specified, sets the config method for the legend tooltip and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "assign(this._legendTooltip, {title: legendLabel.bind(this)})"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    orient: {
      control: {
        type: "radio"
      },
      defaultValue: "vertical",
      description: "Changes the orientation of the entire Tree, either \"vertical\" (top to bottom) or \"horizontal\" (left to right).",
      options: [
        "vertical",
        "horizontal"
      ],
      table: {
        defaultValue: {
          summary: "vertical"
        }
      },
      type: {
        required: false,
        summary: "'vertical' | 'horizontal'"
      }
    },
    separation: {
      control: {},
      defaultValue: "(a, b) => a.parent === b.parent ? 1 : 2",
      description: "If *value* is specified, sets the separation accessor to the specified function. If *value* is not specified, returns the current separation accessor.\n\nFrom the [d3-hierarchy documentation](https://github.com/d3/d3-hierarchy#tree_separation):\n> The separation accessor is used to separate neighboring nodes. The separation function is passed two nodes a and b, and must return the desired separation. The nodes are typically siblings, though the nodes may be more distantly related if the layout decides to place such nodes adjacent.",
      table: {
        defaultValue: {
          detail: "(a, b) => a.parent === b.parent ? 1 : 2",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Circle",
      description: "Changes the primary shape used to represent each data point in a visualization. Not all visualizations support changing shapes, this method can be provided the String name of a D3plus shape class (for example, \"Rect\" or \"Circle\"), or an accessor Function that returns the String class name to be used for each individual data point.",
      table: {
        defaultValue: {
          summary: "Circle"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._shapeConfig, {ariaLabel: (d, i) => this._treeData ? `${this._treeData.i.depth}. ${this._drawLabel(d, i)}.` : , labelConfig: {fontColor: colorDefaults.dark}, Path: {fill: none, stroke: colorDefaults.missing, strokeWidth: 2}, r: 7, width: 12, height: 12})",
      description: "If *value* is specified, sets the config method for each shape and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "assign(this._shapeConfig, {ariaLabel: (d, i) => this._treeData ? `${this._treeData.i.depth}. ${this._drawLabel(d, i)}.` : , labelConfig: {fontColor: colorDefaults.dark}, Path: {fill: none, stroke: colorDefaults.missing, strokeWidth: 2}, r: 7, width: 12, height: 12})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    tooltipConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._tooltipConfig, {title: (d, i, x) => (this._drawLabel(d, i, x.depth - 1))})",
      description: "If *value* is specified, sets the config method for the tooltip and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "assign(this._tooltipConfig, {title: (d, i, x) => (this._drawLabel(d, i, x.depth - 1))})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    }
  }
);
