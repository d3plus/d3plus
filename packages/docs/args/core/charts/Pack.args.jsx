// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Pack as D3plusPack} from "@d3plus/react";
export const Pack = ({ config }) => <D3plusPack config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Pack
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Pack-specific methods
   */
  
  {
    hover: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    layoutPadding: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    legend: {
      control: {
        type: "boolean"
      },
      defaultValue: "(config, arr) => {\n  if (arr.length === this._filteredData.length) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
      table: {
        defaultValue: {
          detail: "(config, arr) => {\n  if (arr.length === this._filteredData.length) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "boolean | function"
      }
    },
    on: {
      control: {
        type: "text"
      },
      defaultValue: {
        mouseenter: "() => {\n  }",
        "mousemove.legend": "(d, i, x, event) => {\n  defaultMouseMoveLegend(d, i, x, event);\n  const ids = this._ids(d, i);\n  const hoverData = recursionCircles(d);\n  this.hover((h)=>{\n      const hover = Object.keys(h).filter((key)=>key !== \"value\").every((key)=>d[key] && d[key].includes(h[key]));\n      if (hover) hoverData.push(h);\n      else if (ids.includes(h.key)) hoverData.push(...recursionCircles(h, [\n          h\n      ]));\n      return hoverData.includes(h);\n  });\n}",
        "mousemove.shape": "(d, i, x, event) => {\n  if (d.__d3plusTooltip__) defaultMouseMoveShape(d, i, x, event);\n  const hoverData = recursionCircles(d, [\n      d\n  ]);\n  this.hover((h)=>hoverData.includes(h));\n}"
      },
      table: {
        defaultValue: {
          summary: {
            mouseenter: "() => {\n  }",
            "mousemove.legend": "(d, i, x, event) => {\n  defaultMouseMoveLegend(d, i, x, event);\n  const ids = this._ids(d, i);\n  const hoverData = recursionCircles(d);\n  this.hover((h)=>{\n      const hover = Object.keys(h).filter((key)=>key !== \"value\").every((key)=>d[key] && d[key].includes(h[key]));\n      if (hover) hoverData.push(h);\n      else if (ids.includes(h.key)) hoverData.push(...recursionCircles(h, [\n          h\n      ]));\n      return hoverData.includes(h);\n  });\n}",
            "mousemove.shape": "(d, i, x, event) => {\n  if (d.__d3plusTooltip__) defaultMouseMoveShape(d, i, x, event);\n  const hoverData = recursionCircles(d, [\n      d\n  ]);\n  this.hover((h)=>hoverData.includes(h));\n}"
          }
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    packOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 0.25,
      table: {
        defaultValue: {
          summary: 0.25
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Circle",
      table: {
        defaultValue: {
          summary: "Circle"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._shapeConfig, {Circle: {label: (d) => d.parent && !d.children ? d.id : false, labelConfig: {fontResize: true}, opacity: (d) => d.__d3plusOpacity__}})",
      table: {
        defaultValue: {
          detail: "assign(this._shapeConfig, {Circle: {label: (d) => d.parent && !d.children ? d.id : false, labelConfig: {fontResize: true}, opacity: (d) => d.__d3plusOpacity__}})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    sort: {
      control: {
        type: "array"
      },
      defaultValue: "(a, b) => b.value - a.value",
      table: {
        defaultValue: {
          detail: "(a, b) => b.value - a.value",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    sum: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"value\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"value\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    }
  }
);
