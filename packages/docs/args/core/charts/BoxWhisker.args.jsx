// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as plotArgTypes} from "./Plot.args.jsx";
import {assign} from "@d3plus/dom";

import {BoxWhisker as D3plusBoxWhisker} from "@d3plus/react";
export const BoxWhisker = ({ config }) => <D3plusBoxWhisker config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Plot primitive and
   * overrides any defaults that have been changed in BoxWhisker
   */
  Object.keys(plotArgTypes)
    .filter(k => !k.match(/^(shape|zoom.*)$/))
    .reduce((obj, k) => (obj[k] = plotArgTypes[k], obj), {}),

  /**
   * BoxWhisker-specific methods
   */
  
  {
    discrete: {
      control: {
        type: "text"
      },
      defaultValue: "x",
      description: "If *value* is specified, sets the discrete accessor to the specified method name (usually an axis) and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "x"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Box",
      description: "Changes the primary shape used to represent each data point in a visualization. Not all visualizations support changing shapes, this method can be provided the String name of a D3plus shape class (for example, \"Rect\" or \"Circle\"), or an accessor Function that returns the String class name to be used for each individual data point.",
      table: {
        defaultValue: {
          summary: "Box"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    tooltipConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._tooltipConfig, {title: (d, i) => {\n  if (!d) return \"\";\n  while(d.__d3plus__ && d.data){\n      d = d.data;\n      i = d.i;\n  }\n  if (this._label) return this._label(d, i);\n  const l = this._ids(d, i).slice(0, this._drawDepth);\n  return l[l.length - 1];\n}})",
      description: "If *value* is specified, sets the config method for the tooltip and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "assign(this._tooltipConfig, {title: (d, i) => {\n  if (!d) return \"\";\n  while(d.__d3plus__ && d.data){\n      d = d.data;\n      i = d.i;\n  }\n  if (this._label) return this._label(d, i);\n  const l = this._ids(d, i).slice(0, this._drawDepth);\n  return l[l.length - 1];\n}})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    }
  }
);
