// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as plotArgTypes} from "./Plot.args.jsx";
import {assign} from "@d3plus/dom";

import {BumpChart as D3plusBumpChart} from "@d3plus/react";
export const BumpChart = ({ config }) => <D3plusBumpChart config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Plot primitive and
   * overrides any defaults that have been changed in BumpChart
   */
  Object.keys(plotArgTypes)
    .filter(k => !k.match(/^(shape|zoom.*)$/))
    .reduce((obj, k) => (obj[k] = plotArgTypes[k], obj), {}),

  /**
   * BumpChart-specific methods
   */
  
  {
    discrete: {
      control: {
        type: "text"
      },
      defaultValue: "x",
      description: "If *value* is specified, sets the discrete accessor to the specified method name (usually an axis) and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "x"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Line",
      description: "Changes the primary shape used to represent each data point in a visualization. Not all visualizations support changing shapes, this method can be provided the String name of a D3plus shape class (for example, \"Rect\" or \"Circle\"), or an accessor Function that returns the String class name to be used for each individual data point.",
      table: {
        defaultValue: {
          summary: "Line"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    y2: {
      control: {
        type: "text"
      },
      defaultValue: "(d) => this._y(d)",
      description: "Sets the y2 accessor to the specified accessor Function or String representing which key in the data to reference. If *value* is not specified, returns the current y2 accessor.",
      table: {
        defaultValue: {
          detail: "(d) => this._y(d)",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    y2Config: {
      control: {
        type: "object"
      },
      defaultValue: "{tickFormat: (val) => {\n  const data = this._formattedData;\n  const xMax = data[data.length - 1].x instanceof Date ? data[data.length - 1].x.getTime() : data[data.length - 1].x;\n  const endData = data.filter((d)=>(d.x instanceof Date ? d.x.getTime() : d.x) === xMax);\n  const d = endData.find((d)=>d.y === val);\n  return d ? this._drawLabel(d, d.i) : \"\";\n}}",
      description: "A pass-through to the underlying [Axis](http://d3plus.org/docs/#Axis) config used for the secondary y-axis. Includes additional functionality where passing \"auto\" as the value for the [scale](http://d3plus.org/docs/#Axis.scale) method will determine if the scale should be \"linear\" or \"log\" based on the provided data.",
      table: {
        defaultValue: {
          detail: "{tickFormat: (val) => {\n  const data = this._formattedData;\n  const xMax = data[data.length - 1].x instanceof Date ? data[data.length - 1].x.getTime() : data[data.length - 1].x;\n  const endData = data.filter((d)=>(d.x instanceof Date ? d.x.getTime() : d.x) === xMax);\n  const d = endData.find((d)=>d.y === val);\n  return d ? this._drawLabel(d, d.i) : \"\";\n}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    y2Sort: {
      control: {},
      defaultValue: "(a, b) => this._y(b) - this._y(a)",
      description: "Defines a custom sorting comparitor function to be used for discrete y2 axes.",
      table: {
        defaultValue: {
          detail: "(a, b) => this._y(b) - this._y(a)",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function"
      }
    },
    yConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{tickFormat: (val) => {\n  const data = this._formattedData;\n  const xMin = data[0].x instanceof Date ? data[0].x.getTime() : data[0].x;\n  const startData = data.filter((d)=>(d.x instanceof Date ? d.x.getTime() : d.x) === xMin);\n  const d = startData.find((d)=>d.y === val);\n  return d ? this._drawLabel(d, d.i) : \"\";\n}}",
      description: "A pass-through to the underlying [Axis](http://d3plus.org/docs/#Axis) config used for the y-axis. Includes additional functionality where passing \"auto\" as the value for the [scale](http://d3plus.org/docs/#Axis.scale) method will determine if the scale should be \"linear\" or \"log\" based on the provided data.\nNote:* If a \"domain\" array is passed to the y-axis config, it will be reversed.",
      table: {
        defaultValue: {
          detail: "{tickFormat: (val) => {\n  const data = this._formattedData;\n  const xMin = data[0].x instanceof Date ? data[0].x.getTime() : data[0].x;\n  const startData = data.filter((d)=>(d.x instanceof Date ? d.x.getTime() : d.x) === xMin);\n  const d = startData.find((d)=>d.y === val);\n  return d ? this._drawLabel(d, d.i) : \"\";\n}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    ySort: {
      control: {},
      defaultValue: "(a, b) => this._y(b) - this._y(a)",
      description: "Defines a custom sorting comparitor function to be used for discrete y axes.",
      table: {
        defaultValue: {
          detail: "(a, b) => this._y(b) - this._y(a)",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function"
      }
    }
  }
);
