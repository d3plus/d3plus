// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {RadialMatrix as D3plusRadialMatrix} from "@d3plus/react";
export const RadialMatrix = ({ config }) => <D3plusRadialMatrix config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in RadialMatrix
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * RadialMatrix-specific methods
   */
  
  {
    cellPadding: {
      control: {
        type: "number"
      },
      defaultValue: 2,
      description: "The pixel padding in between each cell.",
      table: {
        defaultValue: {
          summary: 2
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    column: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"column\"]",
      description: "Determines which key in your data should be used for each column in the matrix. Can be either a String that matches a key used in every data point, or an accessor function that receives a data point and it's index in the data array, and is expected to return it's column value.",
      table: {
        defaultValue: {
          detail: "d => d[\"column\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    columnConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{shapeConfig: {labelConfig: {fontColor: #000, padding: 5, textAnchor: (d) => [\n  0,\n180\n].includes(d.angle) ? middle : [\n  2,\n3\n].includes(d.quadrant) ? end : start, verticalAlign: (d) => [\n  90,\n270\n].includes(d.angle) ? middle : [\n  2,\n1\n].includes(d.quadrant) ? bottom : top}}}",
      description: "A pass-through to the underlying [Axis](http://d3plus.org/docs/#Axis) config used for the column labels.",
      table: {
        defaultValue: {
          detail: "{shapeConfig: {labelConfig: {fontColor: #000, padding: 5, textAnchor: (d) => [\n  0,\n180\n].includes(d.angle) ? middle : [\n  2,\n3\n].includes(d.quadrant) ? end : start, verticalAlign: (d) => [\n  90,\n270\n].includes(d.angle) ? middle : [\n  2,\n1\n].includes(d.quadrant) ? bottom : top}}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    columnList: {
      control: {
        type: "object"
      },
      description: "A manual list of IDs to be used for columns.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    columnSort: {
      control: {},
      defaultValue: "(a, b) => `${a}`.localeCompare(`${b}`)",
      description: "A sort comparator function that is run on the unique set of column values.",
      table: {
        defaultValue: {
          detail: "(a, b) => `${a}`.localeCompare(`${b}`)",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    innerRadius: {
      control: {
        type: "number"
      },
      defaultValue: "(radius) => radius / 5",
      description: "The radius (in pixels) for the inner donut hole of the diagram. Can either be a static Number, or an accessor function that receives the outer radius as it's only argument.",
      table: {
        defaultValue: {
          detail: "(radius) => radius / 5",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    label: {
      control: {
        type: "text"
      },
      defaultValue: "(d, i) => `${getProp.bind(this)(row, d, i)} / ${getProp.bind(this)(column, d, i)}`",
      description: "If *value* is specified, sets the label accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "(d, i) => `${getProp.bind(this)(row, d, i)} / ${getProp.bind(this)(column, d, i)}`",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    on: {
      control: {
        type: "text"
      },
      defaultValue: {
        "mousemove.shape": "(d, i, x, event) => {\n  defaultMouseMoveShape(d, i, x, event);\n  const row = getProp.bind(this)(\"row\", d, i);\n  const column = getProp.bind(this)(\"column\", d, i);\n  this.hover((h, ii)=>getProp.bind(this)(\"row\", h, ii) === row || getProp.bind(this)(\"column\", h, ii) === column);\n}"
      },
      description: "Adds or removes a *listener* to each object for the specified event *typenames*. If a *listener* is not specified, returns the currently assigned listener for the specified event *typename*. Mirrors the core [d3-selection](https://github.com/d3/d3-selection#selection_on) behavior.",
      table: {
        defaultValue: {
          summary: {
            "mousemove.shape": "(d, i, x, event) => {\n  defaultMouseMoveShape(d, i, x, event);\n  const row = getProp.bind(this)(\"row\", d, i);\n  const column = getProp.bind(this)(\"column\", d, i);\n  this.hover((h, ii)=>getProp.bind(this)(\"row\", h, ii) === row || getProp.bind(this)(\"column\", h, ii) === column);\n}"
          }
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    row: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"row\"]",
      description: "Determines which key in your data should be used for each row in the matrix. Can be either a String that matches a key used in every data point, or an accessor function that receives a data point and it's index in the data array, and is expected to return it's row value.",
      table: {
        defaultValue: {
          detail: "d => d[\"row\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    rowList: {
      control: {
        type: "object"
      },
      description: "A manual list of IDs to be used for rows.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    rowSort: {
      control: {},
      defaultValue: "(a, b) => `${a}`.localeCompare(`${b}`)",
      description: "A sort comparator function that is run on the unique set of row values.",
      table: {
        defaultValue: {
          detail: "(a, b) => `${a}`.localeCompare(`${b}`)",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    }
  }
);
