// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as pieArgTypes} from "./Pie.args.jsx";
import {assign} from "@d3plus/dom";

import {Donut as D3plusDonut} from "@d3plus/react";
export const Donut = ({ config }) => <D3plusDonut config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Pie primitive and
   * overrides any defaults that have been changed in Donut
   */
  Object.keys(pieArgTypes)
    .filter(k => !k.match(/^(shape|zoom.*)$/))
    .reduce((obj, k) => (obj[k] = pieArgTypes[k], obj), {}),

  /**
   * Donut-specific methods
   */
  
  {
    innerRadius: {
      control: {
        type: "number"
      },
      defaultValue: "() => min([\n  this._width - this._margin.left - this._margin.right,\nthis._height - this._margin.top - this._margin.bottom\n]) / 4",
      description: "The pixel value, or function that returns a pixel value, that is used as the inner radius of the Pie (creating a Donut).",
      table: {
        defaultValue: {
          detail: "() => min([\n  this._width - this._margin.left - this._margin.right,\nthis._height - this._margin.top - this._margin.bottom\n]) / 4",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    padPixel: {
      control: {
        type: "number"
      },
      defaultValue: 2,
      description: "The padding between each arc, set as a pixel number value.\n\nBy default the value is \\`0\\`, which shows no padding between each arc.\n\nIf \\`padAngle\\` is defined, the \\`padPixel\\` value will not be considered.",
      table: {
        defaultValue: {
          summary: 2
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    }
  }
);
