// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Rings as D3plusRings} from "@d3plus/react";
export const Rings = ({ config }) => <D3plusRings config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Rings
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Rings-specific methods
   */
  
  {
    center: {
      control: {
        type: "text"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "string"
      }
    },
    hover: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    links: {
      control: {
        type: "array"
      },
      defaultValue: "[\n\n]",
      description: "= []",
      table: {
        defaultValue: {
          summary: "[\n\n]"
        }
      },
      type: {
        required: true,
        summary: "array | string"
      }
    },
    noDataMessage: {
      control: {
        type: "boolean"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "boolean"
      }
    },
    nodeGroupBy: {
      control: {
        type: "text"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "string | function | array"
      }
    },
    nodes: {
      control: {
        type: "array"
      },
      defaultValue: "[\n\n]",
      description: "= []",
      table: {
        defaultValue: {
          summary: "[\n\n]"
        }
      },
      type: {
        required: true,
        summary: "array | string"
      }
    },
    on: {
      control: {
        type: "text"
      },
      defaultValue: {
        "click.shape": "(d) => {\n  this._center = d.id;\n  this._margin = {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 0\n  };\n  this._padding = {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 0\n  };\n  this._draw();\n}",
        mouseenter: "() => {\n  }",
        "mouseleave.shape": "() => {\n  this.hover(false);\n}",
        "mousemove.shape": "(d, i, x, event) => {\n  defaultMouseMove(d, i, x, event);\n  if (this._focus && this._focus === d.id) {\n      this.hover(false);\n      this._on.mouseenter.bind(this)(d, i, x, event);\n      this._focus = undefined;\n  } else {\n      const id = this._nodeGroupBy && this._nodeGroupBy[this._drawDepth](d, i) ? this._nodeGroupBy[this._drawDepth](d, i) : this._id(d, i), links = this._linkLookup[id], node = this._nodeLookup[id];\n      const filterIds = [\n          node.id\n      ];\n      const xDomain = [\n          node.x - node.r,\n          node.x + node.r\n      ], yDomain = [\n          node.y - node.r,\n          node.y + node.r\n      ];\n      links.forEach((l)=>{\n          filterIds.push(l.id);\n          if (l.x - l.r < xDomain[0]) xDomain[0] = l.x - l.r;\n          if (l.x + l.r > xDomain[1]) xDomain[1] = l.x + l.r;\n          if (l.y - l.r < yDomain[0]) yDomain[0] = l.y - l.r;\n          if (l.y + l.r > yDomain[1]) yDomain[1] = l.y + l.r;\n      });\n      this.hover((h, x)=>{\n          if (h.source && h.target) return h.source.id === node.id || h.target.id === node.id;\n          else return filterIds.includes(this._ids(h, x)[this._drawDepth]);\n      });\n  }\n}"
      },
      table: {
        defaultValue: {
          summary: {
            "click.shape": "(d) => {\n  this._center = d.id;\n  this._margin = {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 0\n  };\n  this._padding = {\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 0\n  };\n  this._draw();\n}",
            mouseenter: "() => {\n  }",
            "mouseleave.shape": "() => {\n  this.hover(false);\n}",
            "mousemove.shape": "(d, i, x, event) => {\n  defaultMouseMove(d, i, x, event);\n  if (this._focus && this._focus === d.id) {\n      this.hover(false);\n      this._on.mouseenter.bind(this)(d, i, x, event);\n      this._focus = undefined;\n  } else {\n      const id = this._nodeGroupBy && this._nodeGroupBy[this._drawDepth](d, i) ? this._nodeGroupBy[this._drawDepth](d, i) : this._id(d, i), links = this._linkLookup[id], node = this._nodeLookup[id];\n      const filterIds = [\n          node.id\n      ];\n      const xDomain = [\n          node.x - node.r,\n          node.x + node.r\n      ], yDomain = [\n          node.y - node.r,\n          node.y + node.r\n      ];\n      links.forEach((l)=>{\n          filterIds.push(l.id);\n          if (l.x - l.r < xDomain[0]) xDomain[0] = l.x - l.r;\n          if (l.x + l.r > xDomain[1]) xDomain[1] = l.x + l.r;\n          if (l.y - l.r < yDomain[0]) yDomain[0] = l.y - l.r;\n          if (l.y + l.r > yDomain[1]) yDomain[1] = l.y + l.r;\n      });\n      this.hover((h, x)=>{\n          if (h.source && h.target) return h.source.id === node.id || h.target.id === node.id;\n          else return filterIds.includes(this._ids(h, x)[this._drawDepth]);\n      });\n  }\n}"
          }
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Circle",
      table: {
        defaultValue: {
          summary: "Circle"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign(this._shapeConfig, {ariaLabel: (d, i) => {\n  const validSize = this._size ? `, ${this._size(d, i)}` : \"\";\n  return `${this._drawLabel(d, i)}${validSize}.`;\n}, labelConfig: {duration: 0, fontMin: 1, fontResize: true, labelPadding: 0, textAnchor: middle, verticalAlign: middle}, Path: {fill: none, label: false, stroke: #eee, strokeWidth: 1}})",
      table: {
        defaultValue: {
          detail: "assign(this._shapeConfig, {ariaLabel: (d, i) => {\n  const validSize = this._size ? `, ${this._size(d, i)}` : \"\";\n  return `${this._drawLabel(d, i)}${validSize}.`;\n}, labelConfig: {duration: 0, fontMin: 1, fontResize: true, labelPadding: 0, textAnchor: middle, verticalAlign: middle}, Path: {fill: none, label: false, stroke: #eee, strokeWidth: 1}})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    size: {
      control: {
        type: "text"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    sizeMax: {
      control: {
        type: "number"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    sizeMin: {
      control: {
        type: "number"
      },
      defaultValue: 5,
      table: {
        defaultValue: {
          summary: 5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    sizeScale: {
      control: {
        type: "text"
      },
      defaultValue: "sqrt",
      table: {
        defaultValue: {
          summary: "sqrt"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    }
  }
);
