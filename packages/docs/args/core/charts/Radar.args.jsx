// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Radar as D3plusRadar} from "@d3plus/react";
export const Radar = ({ config }) => <D3plusRadar config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Radar
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Radar-specific methods
   */
  
  {
    axisConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{shapeConfig: {fill: none, labelConfig: {fontColor: #999, padding: 0, textAnchor: (d, i, x) => x.textAnchor, verticalAlign: middle}, stroke: #eee, strokeWidth: 1}}",
      description: "Sets the config method used for the radial spokes, circles, and labels.",
      table: {
        defaultValue: {
          detail: "{shapeConfig: {fill: none, labelConfig: {fontColor: #999, padding: 0, textAnchor: (d, i, x) => x.textAnchor, verticalAlign: middle}, stroke: #eee, strokeWidth: 1}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    discrete: {
      control: {
        type: "text"
      },
      defaultValue: "metric",
      description: "If *value* is specified, sets the discrete accessor to the specified method name (usually an axis) and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "metric"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    metric: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"metric\"]",
      description: "Defines the value used as axis. If *value* is specified, sets the accessor to the specified metric function. If *value* is not specified, returns the current metric accessor.",
      table: {
        defaultValue: {
          detail: "d => d[\"metric\"]",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    outerPadding: {
      control: {
        type: "number"
      },
      defaultValue: 100,
      description: "Determines how much pixel spaces to give the outer labels.",
      table: {
        defaultValue: {
          summary: 100
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    shape: {
      control: {
        type: "text"
      },
      defaultValue: "Path",
      description: "Changes the primary shape used to represent each data point in a visualization. Not all visualizations support changing shapes, this method can be provided the String name of a D3plus shape class (for example, \"Rect\" or \"Circle\"), or an accessor Function that returns the String class name to be used for each individual data point.",
      table: {
        defaultValue: {
          summary: "Path"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    value: {
      control: {
        type: "text"
      },
      defaultValue: "d => d[\"value\"]",
      description: "If *value* is specified, sets the value accessor to the specified function or number and returns the current class instance. If *value* is not specified, returns the current value accessor.",
      table: {
        defaultValue: {
          detail: "d => d[\"value\"]",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    }
  }
);
