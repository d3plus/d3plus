// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as vizArgTypes} from "./Viz.args.jsx";
import {assign} from "@d3plus/dom";

import {Treemap as D3plusTreemap} from "@d3plus/react";
export const Treemap = ({ config }) => <D3plusTreemap config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Viz primitive and
   * overrides any defaults that have been changed in Treemap
   */
  Object.keys(vizArgTypes)
    .filter(k => !k.match(/^(shape|zoom.*)$/))
    .reduce((obj, k) => (obj[k] = vizArgTypes[k], obj), {}),

  /**
   * Treemap-specific methods
   */
  
  {
    layoutPadding: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    legend: {
      control: {
        type: "boolean"
      },
      defaultValue: "(config, arr) => {\n  if (arr.length === this._filteredData.length) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
      table: {
        defaultValue: {
          detail: "(config, arr) => {\n  if (arr.length === this._filteredData.length) return false;\n  return defaultLegend.bind(this)(config, arr);\n}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "boolean | function"
      }
    },
    legendSort: {
      control: {},
      defaultValue: "(a, b) => this._sum(b) - this._sum(a)",
      table: {
        defaultValue: {
          detail: "(a, b) => this._sum(b) - this._sum(a)",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "function"
      }
    },
    legendTooltip: {
      control: {
        type: "object"
      },
      defaultValue: "assign({}, this._legendTooltip, {tbody: [\n\n]})",
      table: {
        defaultValue: {
          summary: "assign({}, this._legendTooltip, {tbody: [\n\n]})"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    shapeConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign({}, this._shapeConfig, {ariaLabel: (d, i) => {\n  const rank = this._rankData ? `${this._rankData.indexOf(d) + 1}. ` : \"\";\n  return `${rank}${this._drawLabel(d, i)}, ${this._sum(d, i)}.`;\n}, labelConfig: {fontMax: 32, fontMin: 8, fontResize: true, padding: 5}})",
      table: {
        defaultValue: {
          detail: "assign({}, this._shapeConfig, {ariaLabel: (d, i) => {\n  const rank = this._rankData ? `${this._rankData.indexOf(d) + 1}. ` : \"\";\n  return `${rank}${this._drawLabel(d, i)}, ${this._sum(d, i)}.`;\n}, labelConfig: {fontMax: 32, fontMin: 8, fontResize: true, padding: 5}})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    sort: {
      control: {
        type: "array"
      },
      defaultValue: "(a, b) => {\n  const aggA = isAggregated(a);\n  const aggB = isAggregated(b);\n  return aggA && !aggB ? 1 : !aggA && aggB ? -1 : b.value - a.value;\n}",
      table: {
        defaultValue: {
          detail: "(a, b) => {\n  const aggA = isAggregated(a);\n  const aggB = isAggregated(b);\n  return aggA && !aggB ? 1 : !aggA && aggB ? -1 : b.value - a.value;\n}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    sum: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"value\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"value\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    thresholdKey: {
      control: {
        type: "number"
      },
      defaultValue: "this._sum",
      table: {
        defaultValue: {
          summary: "this._sum"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    tile: {
      control: {
        type: "text"
      },
      defaultValue: "treemapSquarify",
      table: {
        defaultValue: {
          summary: "treemapSquarify"
        }
      },
      type: {
        required: false,
        summary: "string | function"
      }
    },
    tooltipConfig: {
      control: {
        type: "object"
      },
      defaultValue: "assign({}, this._tooltipConfig, {tbody: [\n[\n() => this._translate(Share),\n(d, i, x) => `${formatAbbreviate(x.share * 100, this._locale)}%`\n]\n]})",
      table: {
        defaultValue: {
          detail: "assign({}, this._tooltipConfig, {tbody: [\n[\n() => this._translate(Share),\n(d, i, x) => `${formatAbbreviate(x.share * 100, this._locale)}%`\n]\n]})",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    }
  }
);
