// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {Shape as D3plusShape} from "@d3plus/react";
export const Shape = ({ config }) => <D3plusShape config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in Shape
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * Shape-specific methods
   */
  
  {
    active: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    activeOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 0.25,
      description: "= 0.25",
      table: {
        defaultValue: {
          summary: 0.25
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    activeStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(1);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 3;\n}}",
      table: {
        defaultValue: {
          detail: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(1);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 3;\n}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    ariaLabel: {
      control: {
        type: "text"
      },
      defaultValue: "",
      table: {
        defaultValue: {
          summary: ""
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    backgroundImage: {
      control: {
        type: "text"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    data: {
      control: {
        type: "array"
      },
      defaultValue: "[\n\n]",
      table: {
        defaultValue: {
          summary: "[\n\n]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    discrete: {
      control: {
        type: "text"
      },
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "string"
      }
    },
    duration: {
      control: {
        type: "number"
      },
      defaultValue: 600,
      table: {
        defaultValue: {
          summary: 600
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    fill: {
      control: {
        type: "text"
      },
      defaultValue: "black",
      table: {
        defaultValue: {
          summary: "black"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    fillOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    hitArea: {
      control: {},
      description: "The given function is passed the data point, index, and internally defined properties of the shape and should return an object containing the following values: `width`, `height`, `x`, `y`.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    hover: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    hoverOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 0.5,
      table: {
        defaultValue: {
          summary: 0.5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    hoverStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(0.5);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 2;\n}}",
      table: {
        defaultValue: {
          detail: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(0.5);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 2;\n}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    id: {
      control: {},
      defaultValue: "(d, i) => d.id !== void0 ? d.id : i",
      table: {
        defaultValue: {
          detail: "(d, i) => d.id !== void0 ? d.id : i",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    label: {
      control: {
        type: "text"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "function | string | array"
      }
    },
    labelBounds: {
      control: {},
      description: "The given function is passed the data point, index, and internally defined properties of the shape and should return an object containing the following values: `width`, `height`, `x`, `y`. If an array is returned from the function, each value will be used in conjunction with each label.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    labelConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fontColor: (d, i) => colorContrast(this._fill(d, i)), fontSize: 12, padding: 5}",
      table: {
        defaultValue: {
          detail: "{fontColor: (d, i) => colorContrast(this._fill(d, i)), fontSize: 12, padding: 5}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    opacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    pointerEvents: {
      control: {
        type: "text"
      },
      defaultValue: "visiblePainted",
      table: {
        defaultValue: {
          summary: "visiblePainted"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    render: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    role: {
      control: {
        type: "text"
      },
      defaultValue: "presentation",
      table: {
        defaultValue: {
          summary: "presentation"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    rotate: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    rx: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    ry: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    scale: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    select: {
      control: {
        type: "text"
      },
      defaultValue: "d3.select(\"body\").append(\"svg\")",
      table: {
        defaultValue: {
          summary: "d3.select(\"body\").append(\"svg\")"
        }
      },
      type: {
        required: false,
        summary: "string | htmlelement"
      }
    },
    shapeRendering: {
      control: {
        type: "text"
      },
      defaultValue: "geometricPrecision",
      table: {
        defaultValue: {
          summary: "geometricPrecision"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    sort: {
      control: {
        type: "false"
      },
      defaultValue: "[]",
      table: {
        defaultValue: {
          summary: "[]"
        }
      },
      type: {
        required: false,
        summary: "false | function"
      }
    },
    stroke: {
      control: {
        type: "text"
      },
      defaultValue: "(d, i) => color(this._fill(d, i)).darker(1).formatHex()",
      table: {
        defaultValue: {
          detail: "(d, i) => color(this._fill(d, i)).darker(1).formatHex()",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    strokeDasharray: {
      control: {
        type: "text"
      },
      defaultValue: "0",
      table: {
        defaultValue: {
          summary: "0"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    strokeLinecap: {
      control: {
        type: "text"
      },
      defaultValue: "butt",
      table: {
        defaultValue: {
          summary: "butt"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    strokeOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    strokeWidth: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    textAnchor: {
      control: {
        type: "text"
      },
      defaultValue: "start",
      table: {
        defaultValue: {
          summary: "start"
        }
      },
      type: {
        required: false,
        summary: "function | string | array"
      }
    },
    texture: {
      control: {
        type: "text"
      },
      defaultValue: false,
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "string | object | function"
      }
    },
    textureDefault: {
      control: {
        type: "object"
      },
      defaultValue: "{}",
      table: {
        defaultValue: {
          summary: "{}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    vectorEffect: {
      control: {
        type: "text"
      },
      defaultValue: "non-scaling-stroke",
      table: {
        defaultValue: {
          summary: "non-scaling-stroke"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    verticalAlign: {
      control: {
        type: "text"
      },
      defaultValue: "top",
      table: {
        defaultValue: {
          summary: "top"
        }
      },
      type: {
        required: false,
        summary: "function | string | array"
      }
    },
    x: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"x\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"x\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    y: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"y\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"y\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    }
  }
);
