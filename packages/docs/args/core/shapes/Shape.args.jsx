// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as baseClassArgTypes} from "../utils/BaseClass.args.jsx";
import {assign} from "@d3plus/dom";

import {Shape as D3plusShape} from "@d3plus/react";
export const Shape = ({ config }) => <D3plusShape config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the BaseClass primitive and
   * overrides any defaults that have been changed in Shape
   */
  Object.keys(baseClassArgTypes)
    .reduce((obj, k) => (obj[k] = baseClassArgTypes[k], obj), {}),

  /**
   * Shape-specific methods
   */
  
  {
    active: {
      control: {},
      description: "If *value* is specified, sets the highlight accessor to the specified function and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    activeOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 0.25,
      description: "When shapes are active, this is the opacity of any shape that is not active.",
      table: {
        defaultValue: {
          summary: 0.25
        }
      },
      type: {
        required: true,
        summary: "number"
      }
    },
    activeStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(1);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 3;\n}}",
      description: "The style to apply to active shapes.",
      table: {
        defaultValue: {
          detail: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(1);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 3;\n}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    ariaLabel: {
      control: {
        type: "text"
      },
      defaultValue: "",
      description: "If *value* is specified, sets the aria-label attribute to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: ""
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    backgroundImage: {
      control: {
        type: "text"
      },
      defaultValue: false,
      description: "If *value* is specified, sets the background-image accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    data: {
      control: {
        type: "object"
      },
      defaultValue: "[  ]",
      description: "If *data* is specified, sets the data array to the specified array and returns the current class instance. If *data* is not specified, returns the current data array. A shape will be drawn for each object in the array.",
      table: {
        defaultValue: {
          summary: "[  ]"
        }
      },
      type: {
        required: false,
        summary: "array"
      }
    },
    discrete: {
      control: {
        type: "text"
      },
      description: "Determines if either the X or Y position is discrete along a Line, which helps in determining the nearest data point on a line for a hit area event.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: true,
        summary: "string"
      }
    },
    duration: {
      control: {
        type: "number"
      },
      defaultValue: 600,
      description: "If *ms* is specified, sets the animation duration to the specified number and returns the current class instance. If *ms* is not specified, returns the current animation duration.",
      table: {
        defaultValue: {
          summary: 600
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    fill: {
      control: {
        type: "text"
      },
      defaultValue: "black",
      description: "If *value* is specified, sets the fill accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "black"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    fillOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      description: "Defines the \"fill-opacity\" attribute for the shapes.",
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    hitArea: {
      control: {},
      description: "If *bounds* is specified, sets the mouse hit area to the specified function and returns the current class instance. If *bounds* is not specified, returns the current mouse hit area accessor.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    hover: {
      control: {},
      description: "If *value* is specified, sets the highlight accessor to the specified function and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    hoverOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 0.5,
      description: "If *value* is specified, sets the hover opacity to the specified function and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 0.5
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    hoverStyle: {
      control: {
        type: "object"
      },
      defaultValue: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(0.5);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 2;\n}}",
      description: "The style to apply to hovered shapes.",
      table: {
        defaultValue: {
          detail: "{stroke: (d, i) => {\n  let c = this._fill(d, i);\n  if ([\n      \"transparent\",\n      \"none\"\n  ].includes(c)) c = this._stroke(d, i);\n  return color(c).darker(0.5);\n}, stroke-width: (d, i) => {\n  const s = this._strokeWidth(d, i) || 1;\n  return s * 2;\n}}",
          summary: "function"
        }
      },
      type: {
        required: true,
        summary: "object"
      }
    },
    id: {
      control: {},
      defaultValue: "(d, i) => d.id !== void0 ? d.id : i",
      description: "If *value* is specified, sets the id accessor to the specified function and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "(d, i) => d.id !== void0 ? d.id : i",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    label: {
      control: {
        type: "object"
      },
      defaultValue: false,
      description: "If *value* is specified, sets the label accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "function | string | array"
      }
    },
    labelBounds: {
      control: {},
      description: "If *bounds* is specified, sets the label bounds to the specified function and returns the current class instance. If *bounds* is not specified, returns the current inner bounds accessor.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    labelConfig: {
      control: {
        type: "object"
      },
      defaultValue: "{fontColor: (d, i) => colorContrast(this._fill(d, i)), fontSize: 12, padding: 5}",
      description: "A pass-through to the config method of the TextBox class used to create a shape's labels.",
      table: {
        defaultValue: {
          detail: "{fontColor: (d, i) => colorContrast(this._fill(d, i)), fontSize: 12, padding: 5}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    opacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      description: "If *value* is specified, sets the opacity accessor to the specified function or number and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "number"
      }
    },
    pointerEvents: {
      control: {
        type: "text"
      },
      defaultValue: "visiblePainted",
      description: "If *value* is specified, sets the pointerEvents accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "visiblePainted"
        }
      },
      type: {
        required: false,
        summary: "string"
      }
    },
    render: {
      control: {},
      description: "Renders the current Shape to the page. If a *callback* is specified, it will be called once the shapes are done drawing.",
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    role: {
      control: {
        type: "text"
      },
      defaultValue: "presentation",
      description: "If *value* is specified, sets the role attribute to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "presentation"
        }
      },
      type: {
        required: true,
        summary: "function | string"
      }
    },
    rotate: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "If *value* is specified, sets the rotate accessor to the specified function or number and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    rx: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Defines the \"rx\" attribute for the shapes.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    ry: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "Defines the \"rx\" attribute for the shapes.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    scale: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      description: "If *value* is specified, sets the scale accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    select: {
      control: {
        type: "text"
      },
      defaultValue: "d3.select(\"body\").append(\"svg\")",
      description: "If *selector* is specified, sets the SVG container element to the specified d3 selector or DOM element and returns the current class instance. If *selector* is not specified, returns the current SVG container element.",
      table: {
        defaultValue: {
          summary: "d3.select(\"body\").append(\"svg\")"
        }
      },
      type: {
        required: false,
        summary: "string | htmlelement"
      }
    },
    shapeRendering: {
      control: {
        type: "text"
      },
      defaultValue: "geometricPrecision",
      description: "If *value* is specified, sets the shape-rendering accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "geometricPrecision"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    sort: {
      control: {},
      defaultValue: "[]",
      description: "If *value* is specified, sets the sort comparator to the specified function and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "[]"
        }
      },
      type: {
        required: false,
        summary: "false | function"
      }
    },
    stroke: {
      control: {
        type: "text"
      },
      defaultValue: "(d, i) => color(this._fill(d, i)).darker(1).formatHex()",
      description: "If *value* is specified, sets the stroke accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "(d, i) => color(this._fill(d, i)).darker(1).formatHex()",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    strokeDasharray: {
      control: {
        type: "text"
      },
      defaultValue: "0",
      description: "Defines the \"stroke-dasharray\" attribute for the shapes.",
      table: {
        defaultValue: {
          summary: "0"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    strokeLinecap: {
      control: {
        type: "text"
      },
      defaultValue: "butt",
      description: "Defines the \"stroke-linecap\" attribute for the shapes. Accepted values are `\"butt\"`, `\"round\"`, and `\"square\"`.",
      table: {
        defaultValue: {
          summary: "butt"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    strokeOpacity: {
      control: {
        type: "number"
      },
      defaultValue: 1,
      description: "Defines the \"stroke-opacity\" attribute for the shapes.",
      table: {
        defaultValue: {
          summary: 1
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    strokeWidth: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      description: "If *value* is specified, sets the stroke-width accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    textAnchor: {
      control: {
        type: "object"
      },
      defaultValue: "start",
      description: "If *value* is specified, sets the text-anchor accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "start"
        }
      },
      type: {
        required: false,
        summary: "function | string | array"
      }
    },
    texture: {
      control: {
        type: "object"
      },
      defaultValue: false,
      description: "Defines the texture used inside of each shape. This uses the [textures.js](https://riccardoscalco.it/textures/) package, and expects either a simple string (`\"lines\"` or `\"circles\"`) or a more complex Object containing the various properties of the texture (ie. `{texture: \"lines\", orientation: \"3/8\", stroke: \"darkorange\"}`). If multiple textures are necessary, provide an accsesor Function that returns the correct String/Object for each given data point and index.",
      table: {
        defaultValue: {
          summary: false
        }
      },
      type: {
        required: false,
        summary: "string | object | function"
      }
    },
    textureDefault: {
      control: {
        type: "object"
      },
      defaultValue: "{}",
      description: "A series of global texture methods to be used for all textures (ie. `{stroke: \"darkorange\", strokeWidth: 2}`).",
      table: {
        defaultValue: {
          summary: "{}"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    vectorEffect: {
      control: {
        type: "text"
      },
      defaultValue: "non-scaling-stroke",
      description: "If *value* is specified, sets the vector-effect accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "non-scaling-stroke"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    verticalAlign: {
      control: {
        type: "object"
      },
      defaultValue: "top",
      description: "If *value* is specified, sets the vertical alignment accessor to the specified function or string and returns the current class instance.",
      table: {
        defaultValue: {
          summary: "top"
        }
      },
      type: {
        required: false,
        summary: "function | string | array"
      }
    },
    x: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"x\"]",
      description: "If *value* is specified, sets the x accessor to the specified function or number and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "d => d[\"x\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    y: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"y\"]",
      description: "If *value* is specified, sets the y accessor to the specified function or number and returns the current class instance.",
      table: {
        defaultValue: {
          detail: "d => d[\"y\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    }
  }
);
