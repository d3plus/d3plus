// WARNING: do not edit this file directly, it is generated dynamically from
// the source JSDOC comments using the npm run docs script.

import React from "react";
import {argTypes as shapeArgTypes} from "./Shape.args.jsx";
import {assign} from "@d3plus/dom";

import {Area as D3plusArea} from "@d3plus/react";
export const Area = ({ config }) => <D3plusArea config={config} />;

export const argTypes = assign(

  /**
   * Filters out unused argTypes from the Shape primitive and
   * overrides any defaults that have been changed in Area
   */
  Object.keys(shapeArgTypes)
    .reduce((obj, k) => (obj[k] = shapeArgTypes[k], obj), {}),

  /**
   * Area-specific methods
   */
  
  {
    curve: {
      control: {
        type: "text"
      },
      defaultValue: "linear",
      table: {
        defaultValue: {
          summary: "linear"
        }
      },
      type: {
        required: false,
        summary: "function | string"
      }
    },
    defined: {
      control: {},
      defaultValue: "() => true",
      table: {
        defaultValue: {
          detail: "() => true",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    labelBounds: {
      control: {},
      defaultValue: "(d, i, aes) => {\n  const r = largestRect(aes.points);\n  if (!r) return null;\n  return {\n      angle: r.angle,\n      width: r.width,\n      height: r.height,\n      x: r.cx - r.width / 2 - this._x(d, i),\n      y: r.cy - r.height / 2 - this._y(d, i)\n  };\n}",
      description: "The given function is passed the data point, index, and internally defined properties of the shape and should return an object containing the following values: `width`, `height`, `x`, `y`. If an array is returned from the function, each value will be used in conjunction with each label.",
      table: {
        defaultValue: {
          detail: "(d, i, aes) => {\n  const r = largestRect(aes.points);\n  if (!r) return null;\n  return {\n      angle: r.angle,\n      width: r.width,\n      height: r.height,\n      x: r.cx - r.width / 2 - this._x(d, i),\n      y: r.cy - r.height / 2 - this._y(d, i)\n  };\n}",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    labelConfig: {
      control: {
        type: "object"
      },
      defaultValue: "Object.assign(this._labelConfig, {textAnchor: middle, verticalAlign: middle})",
      table: {
        defaultValue: {
          summary: "Object.assign(this._labelConfig, {textAnchor: middle, verticalAlign: middle})"
        }
      },
      type: {
        required: false,
        summary: "object"
      }
    },
    render: {
      control: {},
      table: {
        defaultValue: {
          summary: "undefined"
        }
      },
      type: {
        required: false,
        summary: "function"
      }
    },
    x: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"x\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"x\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    x0: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"x\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"x\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    x1: {
      control: {
        type: "number"
      },
      defaultValue: "null",
      table: {
        defaultValue: {
          summary: "null"
        }
      },
      type: {
        required: false,
        summary: "function | number | null"
      }
    },
    y: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    y0: {
      control: {
        type: "number"
      },
      defaultValue: 0,
      table: {
        defaultValue: {
          summary: 0
        }
      },
      type: {
        required: false,
        summary: "function | number"
      }
    },
    y1: {
      control: {
        type: "number"
      },
      defaultValue: "d => d[\"y\"]",
      table: {
        defaultValue: {
          detail: "d => d[\"y\"]",
          summary: "function"
        }
      },
      type: {
        required: false,
        summary: "function | number | null"
      }
    }
  }
);
